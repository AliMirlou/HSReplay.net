# -*- coding: utf-8 -*-
# Generated by Django 1.10.2 on 2016-11-15 07:38
from __future__ import unicode_literals

from django.db import migrations, models
import django.db.models.deletion
import hearthstone.enums
import hsreplaynet.utils.fields


DROP_LEGACY_GET_OR_CREATE_DECK_FUNC = """
	DROP FUNCTION get_or_create_deck(text[]);
"""


CREATE_UPDATED_GET_OR_CREATE_DECK_FUNC = """
CREATE OR REPLACE FUNCTION get_or_create_deck(text[])
	RETURNS TABLE (deck_id int, deck_creation_ts timestamp, digest text, created boolean, deck_size int) AS $$
	DECLARE
		computed_digest text;
		generated_deck_id int;
		deck_size int;
		created boolean;
		deck_created_ts timestamp;
	BEGIN
		-- Compute the deck digest
		computed_digest = deck_digest($1);
		deck_size = array_length($1, 1);

		SELECT cd.id, cd.created INTO generated_deck_id, deck_created_ts
		FROM cards_deck cd WHERE cd.digest = computed_digest;

		-- First check whether this deck already exists
		IF FOUND THEN
			created = false;
			RETURN QUERY SELECT generated_deck_id, deck_created_ts, computed_digest, created, deck_size;
			RETURN;
		END IF;

		-- Since the deck does not exist, we must now create it.
		BEGIN
			deck_created_ts = CURRENT_TIMESTAMP;
			INSERT INTO cards_deck (digest, size, created)
			VALUES (computed_digest, deck_size, deck_created_ts)
			RETURNING id INTO generated_deck_id;

			INSERT INTO cards_include (deck_id, card_id, count)
			SELECT generated_deck_id AS deck_id, c.id AS card_id, count(*)
			FROM UNNEST($1) c(id)
			GROUP BY c.id;

			created = true;

		EXCEPTION WHEN unique_violation THEN
			-- If an exception is thrown because another thread inserted the deck
			-- Then just query for the deck ID and let the other thread
			-- Remain responsible for building the deck
			SELECT cd.id, cd.created INTO generated_deck_id, deck_created_ts
			FROM cards_deck cd WHERE cd.digest = computed_digest;

			created = false;
		END;

		RETURN QUERY SELECT generated_deck_id, deck_created_ts, computed_digest, created, deck_size;
		RETURN;
	END;
	$$ LANGUAGE plpgsql;
"""


DROP_UPDATED_GET_OR_CREATE_DECK_FUNC = """
	DROP FUNCTION get_or_create_deck(text[]);
"""

class Migration(migrations.Migration):

	dependencies = [
		('cards', '0006_auto_20161101_2108'),
	]

	operations = [
		migrations.AddField(
			model_name='deck',
			name='size',
			field=models.IntegerField(null=True),
		),
		migrations.RunSQL(
			DROP_LEGACY_GET_OR_CREATE_DECK_FUNC,
			None
		),
		migrations.RunSQL(
			CREATE_UPDATED_GET_OR_CREATE_DECK_FUNC,
			DROP_UPDATED_GET_OR_CREATE_DECK_FUNC
		),
	]
